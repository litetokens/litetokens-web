{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"bignumber.js\"","webpack:///external \"js-sha3\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"elliptic\"","webpack:///external \"axios\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/address.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/xlt.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","base64DecodeFromString","string64","byteArray2hexStr","bin2String","array","arrayEquals","array1","array2","stringToBytes","len","bytes","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","reduce","base64EncodeToString","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","Error","getBase58CheckAddress","addressBytes","hash0","SHA256","checkSum","concat","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","keccak256","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","jsSHA","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","Ethers","AbiCoder","decodeParams","names","types","ignoreMethodHash","obj","arg","index","substr","toLowerCase","encodeParams","values","LitetokensWeb","toHex","isValidURL","url","validator","isURL","protocols","isObject","isArray","isJson","JSON","parse","ex","isBoolean","bool","isBigNumber","number","BigNumber","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","properties","includes","injectPromise","func","args","Promise","resolve","reject","err","res","promiseInjector","scope","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","parseEvent","abi","inputs","type","padLeft","padding","amount","code","accounts","crypto","HttpProvider","host","timeout","user","headers","statusPage","utils","instance","axios","baseURL","auth","request","then","data","payload","method","keys","params","TransactionBuilder","litetokensWeb","to","from","defaultAddress","callback","isAddress","fullNode","to_address","owner_address","sendXlt","tokenID","fromUtf8","asset_name","sendToken","issuerAddress","buyer","purchaseToken","duration","resource","frozen_balance","frozen_duration","freezeBalance","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","invalid","entries","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","bytecode","feeLimit","callValue","userFeePercentage","originEnergyLimit","parameters","payable","some","constructorParams","find","it","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","stringify","parameter","contractAddress","functionSelector","triggerSmartContract","function_selector","message","toUtf8","createToken","abbreviation","description","totalSupply","xltRatio","tokenRatio","saleStart","now","saleEnd","freeBandwidth","freeBandwidthLimit","frozenAmount","frozenDuration","abbr","total_supply","xlt_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","accountName","account_name","updateAccount","updateToken","new_limit","new_public_limit","createProposal","proposalID","proposal_id","deleteProposal","isApproval","is_add_approval","voteProposal","tokenName","tokenBalance","xltBalance","ownerAddress","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","createXLTExchange","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","exchangeID","tokenAmount","exchange_id","token_id","quant","injectExchangeTokens","withdrawExchangeTokens","tokenAmountSold","tokenAmountExpected","fromAscii","expected","tradeExchangeTokens","XLT_MESSAGE_HEADER","Xlt","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","solidityNode","getTransactionInfo","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","sort","b","raw_data","account","getAccount","getBalance","balance","getUnconfirmedAccount","getUnconfirmedBalance","freeNetUsed","freeNetLimit","NetUsed","NetLimit","getBandwidth","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","nodes","port","start","end","startNum","endNum","getBlockRange","listSuperRepresentatives","witnesses","listTokens","timeUntilNextVoteCycle","Math","floor","getContract","useLitetokensHeader","verifyMessage","messageBytes","toUtf8Bytes","messageDigest","recovered","recoverAddress","litetokensAddress","fromHex","defaultPrivateKey","signingKey","SigningKey","signDigest","signatureHex","fromPrivateKey","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","undefined","proposal","getProposal","listProposals","proposals","getChainParameters","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","exchanges","getParamTypes","decodeOutput","filter","Method","outputs","getFunctionSelector","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","xlt","broadcast","checkResult","error","setTimeout","resMessage","decoded","contractResult","eventServer","listener","lastBlock","sinceTimestamp","getTime","getEvents","getEventResult","events","latestEvent","newEvents","RegExp","test","priorEvent","bindListener","clearInterval","setInterval","stop","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","at","entrys","self","startCallback","_startEventListener","_stopEventListener","providers","setFullNode","setSolidityNode","setEventServer","setPrivateKey","abs","setAddress","emit","provider","knownProvider","isValidProvider","setStatusPage","isConnected","currentProviders","eventName","blockNumber","size","page","info","routeParams","response","getEventByTransactionID","prefix","val","fromDecimal","isFinite","Buffer","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","EventEmitter"],"mappings":"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","file":"LitetokensWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"js-sha3\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"elliptic\");","module.exports = require(\"axios\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n        \n    return str;\n}","import { Base64 } from './base64';\n\nexport function bin2String(array) {\n    return String.fromCharCode(...array);\n}\n\nexport function arrayEquals(array1, array2) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (array1[i] != array2[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length == 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else str += String.fromCharCode(arr[i]);\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split(\"\");\n    let out = \"\";\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        const tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        const charValue = String.fromCharCode(tmp);\n\n        out += charValue;\n    }\n\n    return out\n}\n\nexport function hexChar2byte(c) {\n    let d = 0;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n        \n    return d;\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n\n    return byteArray;\n}\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = \"0123456789ABCDEF\";\n    let str = \"\";\n\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    return byteArray.reduce((string, byte) => {\n        return string + byte2hexStr(byte);\n    }, '');\n}\n\nexport function base64DecodeFromString(string64) {\n    const b = new Base64();\n    const decodeBytes = b.decodeToByteArray(string64);\n\n    return decodeBytes;\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10) - 1;\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; //Alll Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; //At least one visible character\n    }\n\n    return -1;\n}","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"30\";\nexport const ADDRESS_PREFIX_BYTE = 0x30;\n","import { byteArray2hexStr } from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n","import * as Ethers from 'ethers';\nimport LitetokensWeb from 'index';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/,'').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/,'').substring(8);\n\n    if (output.replace(/^0x/,'').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '30' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i =0;i<types.length;i++) {\n        if (types[i] === 'address') {\n            values[i] =  LitetokensWeb.address.toHex(values[i]).replace(/^30/, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        return validator.isURL(url.toString(), {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return typeof string === 'string' && !isNaN(parseInt(string, 16));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = '30' + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if(type == 'address')\n                    result = '30' + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while(res.length < amount)\n            res = padding + res;\n\n        return res;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/,'');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};\n","import LitetokensWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nexport default class TransactionBuilder {\n    constructor(litetokensWeb = false) {\n        if(!litetokensWeb || !litetokensWeb instanceof LitetokensWeb)\n            throw new Error('Expected instance of LitetokensWeb');\n\n        this.litetokensWeb = litetokensWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    sendXlt(to = false, amount = 0, from = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendXlt, to, amount, from);\n\n        if(!this.litetokensWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.litetokensWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.litetokensWeb.address.toHex(to);\n        from = this.litetokensWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer XLT to the same account');\n\n        this.litetokensWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.litetokensWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.litetokensWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.litetokensWeb.address.toHex(to);\n        tokenID = this.litetokensWeb.fromUtf8(tokenID);\n        from = this.litetokensWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.litetokensWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.litetokensWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.litetokensWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.litetokensWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.litetokensWeb.address.toHex(issuerAddress),\n            owner_address: this.litetokensWeb.address.toHex(buyer),\n            asset_name: this.litetokensWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.litetokensWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        if(!this.litetokensWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.litetokensWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.litetokensWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.litetokensWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!this.litetokensWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.litetokensWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.litetokensWeb.address.toHex(address),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.litetokensWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.litetokensWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.litetokensWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.litetokensWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.litetokensWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n\n        this.litetokensWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.litetokensWeb.address.toHex(address),\n            url: this.litetokensWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.litetokensWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.litetokensWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.litetokensWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.litetokensWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.litetokensWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            userFeePercentage = 0,\n            originEnergyLimit = 10_000_000,\n            parameters = [],\n            name = \"\",\n        } = options;\n\n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isInteger(originEnergyLimit) || originEnergyLimit < 0)\n            return callback('Invalid options.originEnergyLimit provided');\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.litetokensWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if(typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if(parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for(let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.litetokensWeb.address.toHex(value).replace(/^(30)/, '0x');\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.litetokensWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.litetokensWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [],\n        issuerAddress = this.litetokensWeb.defaultAddress.hex,\n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this.triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                feeLimit,\n                callValue,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        if(!this.litetokensWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.litetokensWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.litetokensWeb.address.toHex(value).replace(/^(30)/, '0x');\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.litetokensWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.litetokensWeb.address.toHex(contractAddress),\n            owner_address: this.litetokensWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.litetokensWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            xltRatio = 1, // How much XLT will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `xltRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(xltRatio) || xltRatio <= 0)\n            return callback('XLT ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.litetokensWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.litetokensWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.litetokensWeb.address.toHex(issuerAddress),\n            name: this.litetokensWeb.fromUtf8(name),\n            abbr: this.litetokensWeb.fromUtf8(abbreviation),\n            description: this.litetokensWeb.fromUtf8(description),\n            url: this.litetokensWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            xlt_num: parseInt(xltRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.litetokensWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.litetokensWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        if(!this.litetokensWeb.isAddress(address)) {\n            return callback('Invalid origin address provided');\n        }\n\n        this.litetokensWeb.fullNode.request('wallet/updateaccount', {\n            account_name: this.litetokensWeb.fromUtf8(accountName),\n            owner_address: this.litetokensWeb.address.toHex(address),\n        }, 'post').then(transaction => {\n\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.litetokensWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.litetokensWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.litetokensWeb.address.toHex(issuerAddress),\n            description: this.litetokensWeb.fromUtf8(description),\n            url: this.litetokensWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.litetokensWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!parameters)\n            return callback('Invalid proposal parameters provided');\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress);\n\n        if(!this.litetokensWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if (!utils.isArray(parameters)) {\n            parameters = [parameters];\n        }\n\n        for (let parameter of parameters) {\n            if(!utils.isObject(parameter))\n                return callback('Invalid parameters provided');\n        }\n\n        this.litetokensWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.litetokensWeb.address.toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.litetokensWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress);\n\n        if(!this.litetokensWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.litetokensWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.litetokensWeb.address.toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.litetokensWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress);\n\n        if(!this.litetokensWeb.isAddress(voterAddress))\n            return callback('Invalid voterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isBoolean(isApproval))\n            return callback('Invalid hasApproval provided');\n\n        this.litetokensWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.litetokensWeb.address.toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.litetokensWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and XLT.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON LITETOKENSSCAN.\n     */\n    createXLTExchange(tokenName, tokenBalance, xltBalance, ownerAddress = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createXLTExchange, tokenName, tokenBalance, xltBalance, ownerAddress);\n\n        if (!this.litetokensWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if (!utils.isInteger(tokenBalance) || tokenBalance <= 0\n            || !utils.isInteger(xltBalance) || xltBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.litetokensWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.litetokensWeb.address.toHex(ownerAddress),\n            first_token_id: this.litetokensWeb.fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for XLT.\n            second_token_balance: xltBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR XLT.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON LITETOKENSSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createXLTExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress);\n\n        if (!this.litetokensWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(firstTokenName) || !firstTokenName.length)\n            return callback('Invalid firstTokenName provided');\n\n        if (!utils.isString(secondTokenName) || !secondTokenName.length)\n            return callback('Invalid secondTokenName provided');\n\n        if (!utils.isInteger(firstTokenBalance) || firstTokenBalance <= 0\n            || !utils.isInteger(secondTokenBalance) || secondTokenBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.litetokensWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.litetokensWeb.address.toHex(ownerAddress),\n            first_token_id: this.litetokensWeb.fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: this.litetokensWeb.fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for XLT.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.litetokensWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.litetokensWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: this.litetokensWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.litetokensWeb.fromUtf8(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.litetokensWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for XLT.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.litetokensWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.litetokensWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.litetokensWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.litetokensWeb.fromUtf8(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.litetokensWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for XLT.\n     */\n    tradeExchangeTokens(exchangeID = false,\n        tokenName = false,\n        tokenAmountSold = 0,\n        tokenAmountExpected = 0,\n        ownerAddress = this.litetokensWeb.defaultAddress.hex,\n        callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress);\n\n        if(!this.litetokensWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmountSold) || tokenAmountSold < 1)\n            return callback('Invalid tokenAmountSold provided');\n\n        if(!utils.isInteger(tokenAmountExpected) || tokenAmountExpected < 1)\n            return callback('Invalid tokenAmountExpected provided');\n\n        this.litetokensWeb.fullNode.request('wallet/exchangetransaction', {\n            owner_address: this.litetokensWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.litetokensWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmountSold),\n            expected:parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.litetokensWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n}\n","import LitetokensWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nconst XLT_MESSAGE_HEADER = '\\x19LITETOKENS Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nexport default class Xlt {\n    constructor(litetokensWeb = false) {\n        if(!litetokensWeb || !litetokensWeb instanceof LitetokensWeb)\n            throw new Error('Expected instance of LitetokensWeb');\n\n        this.litetokensWeb = litetokensWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.litetokensWeb.toUtf8(token.name),\n            abbr: token.abbr && this.litetokensWeb.toUtf8(token.abbr),\n            description: token.description && this.litetokensWeb.toUtf8(token.description),\n            url: token.url && this.litetokensWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.litetokensWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.litetokensWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.litetokensWeb.defaultBlock;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.litetokensWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.litetokensWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.litetokensWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.litetokensWeb.defaultBlock;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.litetokensWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.litetokensWeb.defaultBlock;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.litetokensWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.litetokensWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.litetokensWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.litetokensWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.litetokensWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.litetokensWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.litetokensWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.litetokensWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if(direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.litetokensWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.litetokensWeb.address.toHex(address);\n\n        this.litetokensWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.litetokensWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.litetokensWeb.address.toHex(address);\n\n        this.litetokensWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if(!this.litetokensWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.litetokensWeb.address.toHex(address);\n\n        this.litetokensWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedBalance(address = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.litetokensWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.litetokensWeb.address.toHex(address);\n\n        this.litetokensWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.litetokensWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.litetokensWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.litetokensWeb.address.toHex(address);\n\n        this.litetokensWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.litetokensWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.litetokensWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.litetokensWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.litetokensWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.litetokensWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.litetokensWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.litetokensWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.litetokensWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.litetokensWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.litetokensWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.litetokensWeb.address.toHex(contractAddress);\n\n        this.litetokensWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.litetokensWeb.defaultAddress.base58, useLitetokensHeader = true, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.litetokensWeb.defaultAddress.base58;\n            useLitetokensHeader = true;\n        }\n\n        if(utils.isFunction(useLitetokensHeader)) {\n            callback = useLitetokensHeader;\n            useLitetokensHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useLitetokensHeader);\n\n        if(!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if(message.substr(0, 2) == '0x')\n            message = message.substring(2);\n\n        if(signature.substr(0, 2) == '0x')\n            signature = signature.substr(2);\n\n        const messageBytes = [\n            ...Ethers.utils.toUtf8Bytes(useLitetokensHeader ? XLT_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = Ethers.utils.keccak256(messageBytes);\n        const recovered = Ethers.utils.recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const litetokensAddress = '30' + recovered.substr(2);\n        const base58Address = this.litetokensWeb.address.fromHex(litetokensAddress);\n\n        if(base58Address == this.litetokensWeb.address.fromHex(address))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    async sign(transaction = false, privateKey = this.litetokensWeb.defaultPrivateKey, useLitetokensHeader = true, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.litetokensWeb.defaultPrivateKey;\n            useLitetokensHeader = true;\n        }\n\n        if(utils.isFunction(useLitetokensHeader)) {\n            callback = useLitetokensHeader;\n            useLitetokensHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useLitetokensHeader);\n\n        // Message signing\n        if(utils.isString(transaction)) {\n            if(transaction.substring(0, 2) == '0x')\n                transaction = transaction.substring(2);\n\n            if(!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signingKey = new Ethers.utils.SigningKey(privateKey);\n                const messageBytes = [\n                    ...Ethers.utils.toUtf8Bytes(useLitetokensHeader ? XLT_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n                    ...utils.code.hexStr2byteArray(transaction)\n                ];\n\n                const messageDigest = Ethers.utils.keccak256(messageBytes);\n                const signature = signingKey.signDigest(messageDigest);\n\n                const signatureHex = [\n                    '0x',\n                    signature.r.substring(2),\n                    signature.s.substring(2),\n                    Number(signature.v).toString(16)\n                ].join('');\n\n                return callback(null, signatureHex);\n            } catch(ex) {\n                callback(ex);\n            }\n        }\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.litetokensWeb.address.toHex(\n                this.litetokensWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.litetokensWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if(!this.litetokensWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.litetokensWeb.defaultPrivateKey,\n            address: this.litetokensWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.litetokensWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.litetokensWeb.transactionBuilder.sendXlt(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if(!this.litetokensWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.litetokensWeb.defaultPrivateKey,\n            address: this.litetokensWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.litetokensWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.litetokensWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n/**\n     * Freezes an amount of XLT.\n     * Will give bandwidth OR Energy and LITETOKENS Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen xlt\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, callback = false)\n    {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.litetokensWeb.defaultPrivateKey,\n            address: this.litetokensWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.litetokensWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.litetokensWeb.transactionBuilder.freezeBalance(amount, duration, resource, address);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze XLT that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and LITETOKENS Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, callback = false)\n    {\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.litetokensWeb.defaultPrivateKey,\n            address: this.litetokensWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.litetokensWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.litetokensWeb.transactionBuilder.unfreezeBalance(resource, address);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {},  callback = false)\n    {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.litetokensWeb.defaultPrivateKey,\n            address: this.litetokensWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.litetokensWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.litetokensWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendXlt(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.litetokensWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.litetokensWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.litetokensWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({ chainParameter = [] }) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.litetokensWeb.defaultAddress.hex, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if(!this.litetokensWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.litetokensWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.litetokensWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.litetokensWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.litetokensWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.litetokensWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n};\n","import utils from 'utils';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.litetokensWeb = contract.litetokensWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.litetokensWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.litetokensWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] == 'address')\n                args[index] = this.litetokensWeb.address.toHex(arg).replace(/^(30)/, '0x')\n\n            if (types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.litetokensWeb.address.toHex(address).replace(/^(30)/, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.litetokensWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.litetokensWeb.address.toHex(options.from),\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.litetokensWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.litetokensWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {...this.defaultOptions, ...options};\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.litetokensWeb.address.fromPrivateKey(privateKey) : this.litetokensWeb.defaultAddress.base58;\n            const transaction = await this.litetokensWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.litetokensWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.litetokensWeb.xlt.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.litetokensWeb.xlt.sendRawTransaction(signedTransaction);\n\n            if (!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.litetokensWeb.xlt.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.litetokensWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if (!this.litetokensWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        const sinceTimestamp = new Date().getTime();\n\n        const getEvents = async () => {\n            try {\n                const events = await this.litetokensWeb.getEventResult(this.contract.address, sinceTimestamp, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                        return false;\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import LitetokensWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(litetokensWeb = false, abi = [], address = false) {\n        if(!litetokensWeb || !litetokensWeb instanceof LitetokensWeb)\n            throw new Error('Expected instance of LitetokensWeb');\n\n        this.litetokensWeb = litetokensWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if(this.litetokensWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.litetokensWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                return false;\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n\n            if(!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.litetokensWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (func.type.toLowerCase() === 'constructor')\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.litetokensWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.litetokensWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.litetokensWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.litetokensWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.litetokensWeb.xlt.sign(transaction, privateKey);\n            const contract = await this.litetokensWeb.xlt.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.litetokensWeb.xlt.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Xlt from 'lib/xlt';\nimport Contract from 'lib/contract';\n\nimport { keccak256 } from 'js-sha3';\n\nexport default class LitetokensWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n\n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        super();\n\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = LitetokensWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.xlt = new Xlt(this);\n        this.utils = utils;\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if([ false, 'latest', 'earliest', 0 ].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(!eventServer)\n            return this.eventServer = false;\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if(!this.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.eventServer = eventServer;\n        this.eventServer.isConnected = () => this.eventServer.request('healthcheck').then(() => true).catch(() => (\n            this.eventServer.request('events?size=1').then(data => (\n                Array.isArray(data)\n            ))\n        )).catch(() => false);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, sinceTimestamp = 0, eventName = false, blockNumber = false, size = 20, page = 1, callback = false) {\n\n        if(utils.isFunction(page)) {\n            callback = page;\n            page = 1;\n        }\n\n        if(utils.isFunction(size)) {\n            callback = size;\n            size = 20;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, sinceTimestamp, eventName, blockNumber, size, page);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        if(size > 200) {\n            console.info('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return this.eventServer.request(`event/contract/${routeParams.join('/')}?since=${sinceTimestamp}&size=${size}&page=${page}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    getEventByTransactionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransactionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return this.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/,'30');\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return LitetokensWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return LitetokensWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return LitetokensWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if(!isFinite(val))\n                return LitetokensWeb.fromUtf8(val);\n        }\n\n        return LitetokensWeb.fromDecimal(val);\n    }\n\n    static toUtf8(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('utf8');\n    }\n\n    static fromUtf8(string) {\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n\n    static fromAscii(string, padding) {\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n    static toDecimal(value) {\n        return LitetokensWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = LitetokensWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const xlt = LitetokensWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? xlt : xlt.toString(10);\n    }\n\n    static toSun(xlt) {\n        const sun = LitetokensWeb.toBigNumber(xlt).times(1_000_000);\n        return utils.isBigNumber(xlt) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && (amount.indexOf('0x') === 0 || amount.indexOf('-0x') === 0))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            return LitetokensWeb.isAddress(\n                utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                )\n            );\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}